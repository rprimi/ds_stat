---
title: "Introdução ao ggplot"
format: html
editor: visual
---

## Dados

```{r}
  bd_iels <- readRDS("../data_exerc/ex0_iels/base_iels1.RDS")

  library(readxl)
  dic_subset <- read_excel("../data_exerc/ex0_iels/dic.xlsx", sheet = "dic1")
```

### Explorando a base

```{r}

names(bd_iels)

dplyr::glimpse(bd_iels)
sjlabelled::get_label(bd_iels)
sjlabelled::get_labels(bd_iels)


```

### Bibliotecas

```{r}
library(ggplot2)
library(scales)
library(labelled)
```

## Parte 1

### Qual a relação entre português e matemática?

-   Criando unm canvas

```{r}
ggplot(data = bd_iels)
```

-   Adiciionando geoms

```{r}
ggplot(data = bd_iels) + 
  geom_point(mapping = aes(y = ELWMEPV1 , x = AGE_MONTHS))

ggplot(data = bd_iels) + 
  geom_point(mapping = aes(y = ELWMEPV1 , x = ELLITPV1))


```

-   ggplot(data = <DATA>) + <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))

-   Adicione mais camadas

```{r}
ggplot(data = bd_iels) + 
  geom_point(mapping = aes(y = ELWMEPV1 , x = AGE_MONTHS)) +
  geom_smooth(mapping = aes(y = ELWMEPV1 , x = AGE_MONTHS))
```

-   Ou faça assim

```{r}

ggplot(data = bd_iels,mapping = aes(y = ELWMEPV1 , x = AGE_MONTHS)) + 
 geom_point() +
  geom_smooth()

  
```

### Sua vez

-   Qual a relação entre outras variáveis ?

```{r}

```

### Melhorando aspectos do gráfico

```{r}
library(dplyr)

bd_iels$ITSEX <- as.factor(bd_iels$ITSEX)
ggplot(
 data = bd_iels,
 mapping = aes(y = ELINHPV1 , x = ELMFXPV1, color = ITSEX)
 ) +   
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Association of Executive Functions across sex ",
       subtitle = "x = Mental Flexility, y = Inhibition",
       x = "Mental Flexility",
       y = " Inhibition",
       color = "sexo" ) +
  theme_classic()

plot(bd_iels$ELINHPV1, bd_iels$ELMFXPV1, col = "red" )
  
```

### Qual a relação entre as provas e idade ?

-   Explore a relação com outras terceiras variáveis. Use outros atributos: *color*: altera a cor de formas que não têm área (pontos e retas); *fill*: altera a cor de formas com área (barras, caixas, densidades, áreas); *size*: altera o tamanho de formas; *type*: altera o tipo da forma, geralmente usada para pontos e *linetype*: altera o tipo da linha.

-   Shapes ![Shapes](../imagens/shapes-1.png)

```{r}
 

ggplot(data = bd_iels, mapping = aes(y = ELWMEPV1 , x = 	
ITAGE)) + 
 geom_point() +
  geom_smooth()

ggplot(data = bd_iels, mapping = aes(y = ELWMEPV1 , x = 	
ITAGE, color = CNTRY)) + 
 geom_point() +
  geom_smooth()




```

-   Veja como a cor é usada aqui

```{r eval = FALSE}

ggplot(data = bd_iels) + 
  geom_point(mapping = aes(y = ELINHPV1 , x = ELMFXPV1), color = "orange")

```

### Uso de facets

```{r}

ggplot(data = bd_iels,
       mapping = aes(y = ELWMEPV1 , x = 	ITAGE, color = CNTRY)) + 
 geom_point() +
 geom_smooth() +
 facet_wrap(~CNTRY)

ggplot(data = bd_iels,
       mapping = aes(
        y = ELWMEPV1 , 
        x = 	ITAGE, 
        color = CNTRY)
        ) + 
 geom_point(show.legend = T) +
 facet_grid(ITSEX~CNTRY)


glimpse(bd_iels)

```

### Distribuições

-   Análise de distribuições. Tente manipular `fill` e `color` para fazer esse histograma ficar mais bonito?
-   Tente ver o help usando `?geom_histogram`

```{r}

ggplot(data = bd_iels,
       mapping = aes(y = ELWMEPV1 , x = 	ITAGE, color = CNTRY)) + 
 geom_point() +
 geom_smooth() +
 facet_wrap(~CNTRY)

ggplot(data = bd_iels) + 
  geom_histogram(mapping = aes(x = ELWMEPV1), 
                 fill = "red", color = "white")



```

## Parte 2

### Geoms

-   Estudo e cheatsheet <https://posit.co/resources/cheatsheets/>

```{r}


ggplot(data = bd_iels) + 
  geom_point(mapping = aes(y = ELEDPPV1, x = ELPAPRO, color = ITSEX))


```

-   Visualização de padrões de correlação `geom_smooth`. Note o que foi feito.

```{r}


ggplot(data = bd_iels) + 
  geom_smooth(mapping = aes(y = ELEDPPV1, x = ELPAPRO))
              
ggplot(data = bd_iels) + 
  geom_smooth(mapping = aes(y = ELEDPPV1, x = ELPAPRO, color = ITSEX))

 

```

-   Podemos sobrepor geoms !!

```{r}

ggplot(data = bd_iels) + 
  geom_smooth(mapping = aes(y = ELEDPPV1, x = ELPAPRO))
              
ggplot(data = bd_iels) + 
  geom_point(mapping = aes(y = ELEDPPV1, x = ELPAPRO, color = ITSEX), alpha = 1/8) +
  geom_smooth(mapping = aes(y = ELEDPPV1, x = ELPAPRO, color = ITSEX)) +
 theme_minimal()


```

-   Note que o grafico acima poderia ser feito assim

```{r}

ggplot(data = bd_iels, mapping = aes(y = ELEDPPV1, x = ELPAPRO, color = ITSEX)) + 
  geom_point(alpha = 1/8) +
  geom_smooth() +
 theme_minimal()


```

-   Quando você especifica o mapeamento dentro de uma função `geom_` este será usado localmente no layer criado pelo geom.

```{r}

ggplot(data = bd_iels, mapping = aes(y = ELEDPPV1, x = ELPAPRO)) + 
  geom_point(aes(color = ITSEX), alpha = 1/2)  +
  geom_smooth() +
  theme_minimal()



```

-   Veja que você pode especificar um dataframe específico dentro da função geom

```{r}
library(sjmisc)
frq(bd_iels$CNTRY)


ggplot(data = bd_iels, mapping = aes(y = ELEDPPV1, x = ELPAPRO)) + 
  geom_point(aes(color = ITSEX), alpha = 1/2)  +
  geom_point(data = filter(bd_iels, CNTRY == "EST" ),  color = "yellow", alpha = 1/10)  +
  geom_smooth() +
  theme_minimal()

```

### Transformações estatísticas

-   Veja como fazemos figuras de barras

```{r}

frq(bd_iels$EDUCAT_MOT)


ggplot(data = bd_iels) + 
  geom_bar(mapping = aes(x = EDUCAT_MOT, fill = CNTRY)) +
  theme(axis.text.x  = element_text(angle=90, vjust=0.5) )

```

-   Note o formato da base de dados. Eles foram contados antes de serem colocados no gráfico

O que o ggplot faz? (veja Grolemund & Wickham, 2017, <https://r4ds.had.co.nz/transform.html>)

-   bar charts, histograms, and frequency polygons bin your data and then plot bin counts, the number of points that fall in each bin.

-   smoothers fit a model to your data and then plot predictions from the model.

-   boxplots compute a robust summary of the distribution and then display a specially formatted box.

![](../imagens/visualization-stat-bar.png)

Grolemund & Wickham (2017): "You can learn which stat a geom uses by inspecting the default value for the stat argument. For example, ?geom_bar shows that the default value for stat is "count", which means that geom_bar() uses stat_count(). stat_count() is documented on the same page as geom_bar(), and if you scroll down you can find a section called "Computed variables". That describes how it computes two new variables: count and prop"

### Ajustes de posição

-   O que acontece quando usamos uma segunda variável em `fill`. Veja o que o ajuste `position` faz:

```{r}


ggplot(data = bd_iels) + 
  geom_bar(mapping = aes(x = EDUCAT_MOT, fill = CNTRY))

ggplot(data = bd_iels) + 
  geom_bar(mapping = aes(x = EDUCAT_MOT, fill = CNTRY), position = "dodge")
    
ggplot(data = bd_iels) + 
  geom_bar(mapping = aes(x = EDUCAT_MOT, fill = CNTRY), position = "stack")

ggplot(data = bd_iels) + 
  geom_bar(mapping = aes(x = EDUCAT_MOT, fill = CNTRY), position = "fill")


```


-   Veja o código abaixo. Ele faz a conta primeiro e depois o gráfico. Note que precisamos indicar o argumento `stat =  "identity"` para dizer ao ggplot que deve considerar os valores como estão na base.

```{r}
library(dplyr)


labelled::print_labels(bd_iels$P1SEI)


count(bd_iels, EDUCAT_MOT) 



df <- count(bd_iels, EDUCAT_MOT) 
 
ggplot(data = df, mapping = aes(x = EDUCAT_MOT, y = n)) +
    geom_bar(stat = "identity") 

get_value_labels(bd_iels$EDUCAT_MOT)

```

-   Como fazer um gráfico de proporção

```{r}

library(scales)

```

```{r}




ggplot(data = bd_iels, aes(x =  EDUCAT_MOT, group=CNTRY)) + 
  geom_bar(
    aes(y = ..prop.., fill = CNTRY),
    position = "dodge"
  ) +
  geom_text(
    aes(y = ..prop.., label = scales::percent(..prop.., accuracy = 0.1)),
    position = "dodge",
    vjust = -.5, stat= "count", size = 2) +
  scale_y_continuous(labels=percent_format()) +
  facet_grid(~CNTRY)



```



### Sistema de coordenadas

```{r}

bar = ggplot(data = bd_iels
       ) + 
  geom_bar(
    mapping = aes(
      x =  EDUCAT_MOT, 
      y = after_stat(count /sum(count)), 
      fill = CNTRY,
      
    ),
    position = "dodge",
    show.legend = FALSE
  ) +
  scale_y_continuous(labels=percent_format())
  

bar

bar + coord_flip()
bar + coord_polar()


```


### Síntese: "The layered grammar of grafics"

ggplot(data = <DATA>) + <GEOM_FUNCTION>( mapping = aes(<MAPPINGS>), stat = <STAT>, position = <POSITION> ) + <COORDINATE_FUNCTION> + <FACET_FUNCTION>

Veja: <http://www.labape.com.br/rprimi/ds/garrett_grolemund_ggplot.pdf>

<http://www.cookbook-r.com/Graphs/>

### Salvando os graficos

```{r }

ggsave("f1.png" )

```



### Exercício 2
-   Use a base do ENEM
-   Escolha duas variáveis de caracterização dos sujeitos do ENEM (lembre-se que há uma questinário socio econômico)
-   Faça um gráfico de barras com essas variáveis
-   Faça um gráfico mostrando a relação entre desempenho em uma prova do ENEM com essas variáveis
-   Faça um relatório em R-Markdown so mostrando o texto e os gráficos

### Plus

-   Olhe esse gráfico. O que ele informa ?

```{r}
#ggplot(data = enem) + 
#  stat_ecdf(mapping = aes(x = NU_NOTA_MT), color = "red") +
#  stat_ecdf(mapping = aes(x = NU_NOTA_CN), color = "orange") +
#  stat_ecdf(mapping = aes(x = NU_NOTA_CH), color = "blue") +
#  stat_ecdf(mapping = aes(x = NU_NOTA_LC), color = "green") +
#  scale_x_continuous(breaks = seq(300, 800, 50), limits = c(300, 800))
#
#glimpse(f)
#
#f = ecdf(enem$NU_NOTA_MT)
#f(500)
#
```

```{r}

ggplot(data = enem) + 
  geom_bar(
    mapping = aes(
    x =  TP_COR_RACA, 
    y = stat(prop), 
    fill = TP_SEXO,
    group  = 1
    ),
    position = "dodge"
    ) +
  scale_y_continuous(labels=percent_format())


```

```{r}
 

ggplot( data = enem) +
 geom_bar(aes(x = TP_COR_RACA,  fill = TP_SEXO),
    position = "fill", alpha = .4
        )

ggplot( data = enem) +
 geom_bar(aes(x = TP_COR_RACA,  fill = TP_SEXO),
    position = "dodge", alpha = .8
        )


```

-   Como comparar proporções. Veja:

```{r}

#
#ggplot(data = enem
#       ) + 
#  geom_bar(
#    mapping = aes(
#      x =  TP_COR_RACA, 
#      y = after_stat(count /sum(count)), 
#      fill = TP_SEXO
#    ),
#    position = "dodge"
#  ) + scale_y_continuous(labels=percent_format())



```



```{r}
ggplot(data = enem
       ) + 
  geom_bar(
    mapping = aes(
      x =  TP_COR_RACA, 
      y = after_stat(count /sum(count)), 
      fill = TP_SEXO,
      
    ),
    show.legend = TRUE,
     position = "dodge"
  ) +
  scale_y_continuous(labels=percent_format()) +
  coord_polar()
  
```